{"version":3,"sources":["../../../../../src/streaming/controllers/PlaybackController.js"],"names":["LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS","PlaybackController","context","eventBus","getInstance","instance","logger","streamController","dashMetrics","adapter","videoModel","timelineConverter","streamSwitch","streamSeekTime","wallclockTimeIntervalId","liveDelay","streamInfo","isDynamic","mediaPlayerModel","playOnceInitialized","lastLivePlaybackTime","availabilityStartTime","seekTarget","isLowLatencySeekingInProgress","playbackStalled","minPlaybackRateChange","uriFragmentModel","settings","setup","getLogger","reset","initialize","sInfo","periodSwitch","seekTime","addAllListeners","manifestInfo","ua","navigator","userAgent","toLowerCase","isSafari","test","on","Events","STREAM_INITIALIZED","onStreamInitialized","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","LOADING_PROGRESS","onFragmentLoadProgress","BUFFER_LEVEL_STATE_CHANGED","onBufferLevelStateChanged","PLAYBACK_PROGRESS","onPlaybackProgression","PLAYBACK_TIME_UPDATED","PLAYBACK_ENDED","onPlaybackEnded","STREAM_INITIALIZING","onStreamInitializing","play","e","isNaN","startTime","liveStartTime","dvrInfo","getCurrentDVRInfo","dvrWindow","range","startTimeFromUri","getStartTimeFromUriParameters","start","info","Math","max","min","duration","getTime","trigger","PLAYBACK_SEEKING","seek","getTimeToStreamEnd","parseFloat","getStreamEndTime","toFixed","getElement","isPaused","pause","isSeeking","time","stickToBuffered","internalSeek","currentTime","removeEventListener","onPlaybackSeeking","setCurrentTime","PLAYBACK_SEEK_ASKED","seekToLive","DVRMetrics","DVRWindow","end","getLiveDelay","getNormalizedTime","t","timeOffset","getPlaybackRate","getPlayedRanges","getEnded","getIsDynamic","getStreamController","computeAndSetLiveDelay","fragmentDuration","dvrWindowSize","minBufferTime","delay","ret","END_OF_PLAYLIST_PADDING","MIN_BUFFER_TIME_FACTOR","FRAGMENT_DURATION_FACTOR","adjustedFragmentDuration","isFinite","NaN","suggestedPresentationDelay","getSuggestedPresentationDelay","get","streaming","lowLatencyEnabled","liveDelayFragmentCount","useSuggestedPresentationDelay","getAvailabilityStartTime","targetDelayCapping","setLiveDelay","value","useMaxValue","getCurrentLiveLatency","now","Date","getClientTimeOffset","off","stopUpdatingWallclockTime","removeAllListeners","setConfig","config","rangeStart","fragData","getURIFragmentData","split","indexOf","parseInt","substring","getActualPresentationTime","actualTime","debug","abs","startUpdatingWallclockTime","tick","onWallclockTime","setInterval","wallclockTimeUpdateInterval","clearInterval","updateCurrentTime","getReadyState","timeChanged","error","representationInfo","convertDataToRepresentationInfo","currentRepresentation","mediaInfo","id","onCanPlay","CAN_PLAY","onPlaybackStart","PLAYBACK_STARTED","onPlaybackWaiting","PLAYBACK_WAITING","playingTime","onPlaybackPlaying","PLAYBACK_PLAYING","onPlaybackPaused","PLAYBACK_PAUSED","ended","onPlaybackSeeked","PLAYBACK_SEEKED","addEventListener","onPlaybackTimeUpdated","timeToEnd","updateLivePlaybackTime","onPlaybackProgress","onPlaybackRateChanged","rate","PLAYBACK_RATE_CHANGED","playbackRate","onPlaybackMetaDataLoaded","PLAYBACK_METADATA_LOADED","onNativePlaybackEnded","getActiveStreamInfo","isLast","onPlaybackError","event","target","srcElement","PLAYBACK_ERROR","WALLCLOCK_TIME_UPDATED","liveCatchUpPlaybackRate","needToCatchUp","startPlaybackCatchUp","stopPlaybackCatchUp","getBufferLevel","bufferLevel","getActiveStreamProcessors","forEach","bl","p","currentLiveLatency","latencyDrift","liveCatchupLatencyThreshold","getLiveCatchupLatencyThreshold","liveCatchUpMinDrift","cpr","deltaLatency","d","s","pow","E","newRate","setPlaybackRate","liveCatchUpMaxDrift","stream","request","minDelay","warn","update","streamId","state","MetricsConstants","BUFFER_EMPTY","setStallState","mediaType","onPlaybackStalled","PLAYBACK_STALLED","applyServiceDescription","serviceDescriptions","llsd","i","length","sd","schemeIdUri","Constants","SERVICE_DESCRIPTION_LL_SCHEME","supplementalProperties","SUPPLEMENTAL_PROPERTY_LL_SCHEME","latency","undefined","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"PlaybackController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nconst LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS = 500;\n\nfunction PlaybackController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        streamController,\n        dashMetrics,\n        adapter,\n        videoModel,\n        timelineConverter,\n        streamSwitch,\n        streamSeekTime,\n        wallclockTimeIntervalId,\n        liveDelay,\n        streamInfo,\n        isDynamic,\n        mediaPlayerModel,\n        playOnceInitialized,\n        lastLivePlaybackTime,\n        availabilityStartTime,\n        seekTarget,\n        isLowLatencySeekingInProgress,\n        playbackStalled,\n        minPlaybackRateChange,\n        uriFragmentModel,\n        settings;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n\n        reset();\n    }\n\n    function initialize(sInfo, periodSwitch, seekTime) {\n        streamInfo = sInfo;\n        addAllListeners();\n        isDynamic = streamInfo.manifestInfo.isDynamic;\n        isLowLatencySeekingInProgress = false;\n        playbackStalled = false;\n        streamSwitch = periodSwitch === true;\n        streamSeekTime = seekTime;\n\n        const ua = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase() : '';\n\n        // Detect safari browser (special behavior for low latency streams)\n        const isSafari = /safari/.test(ua) && !/chrome/.test(ua);\n        minPlaybackRateChange = isSafari ? 0.25 : 0.02;\n\n        eventBus.on(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.on(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.on(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\n        eventBus.on(Events.PLAYBACK_ENDED, onPlaybackEnded, this);\n        eventBus.on(Events.STREAM_INITIALIZING, onStreamInitializing, this);\n\n        if (playOnceInitialized) {\n            playOnceInitialized = false;\n            play();\n        }\n    }\n\n    function onStreamInitialized(e) {\n        // Seamless period switch\n        if (streamSwitch && isNaN(streamSeekTime)) return;\n\n        // Seek new stream in priority order:\n        // - at seek time (streamSeekTime) when switching period\n        // - at start time provided in URI parameters\n        // - at stream/period start time (for static streams) or live start time (for dynamic streams)\n        let startTime = streamSeekTime;\n        if (isNaN(startTime)) {\n            if (isDynamic) {\n                // For dynamic stream, start by default at (live edge - live delay)\n                startTime = e.liveStartTime;\n                // If start time in URI, take min value between live edge time and time from URI (capped by DVR window range)\n                const dvrInfo = dashMetrics.getCurrentDVRInfo();\n                const dvrWindow = dvrInfo ? dvrInfo.range : null;\n                if (dvrWindow) {\n                    // #t shall be relative to period start\n                    const startTimeFromUri = getStartTimeFromUriParameters(streamInfo.start, true);\n                    if (!isNaN(startTimeFromUri)) {\n                        logger.info('Start time from URI parameters: ' + startTimeFromUri);\n                        startTime = Math.max(Math.min(startTime, startTimeFromUri), dvrWindow.start);\n                    }\n                }\n            } else {\n                // For static stream, start by default at period start\n                startTime = streamInfo.start;\n                // If start time in URI, take max value between period start and time from URI (if in period range)\n                const startTimeFromUri = getStartTimeFromUriParameters(streamInfo.start, false);\n                if (!isNaN(startTimeFromUri) && startTimeFromUri < (startTime + streamInfo.duration)) {\n                    logger.info('Start time from URI parameters: ' + startTimeFromUri);\n                    startTime = Math.max(startTime, startTimeFromUri);\n                }\n            }\n        }\n\n        if (!isNaN(startTime) && startTime !== videoModel.getTime()) {\n            // Trigger PLAYBACK_SEEKING event for controllers\n            eventBus.trigger(Events.PLAYBACK_SEEKING, {\n                seekTime: startTime\n            });\n            // Seek video model\n            seek(startTime, false, true);\n        }\n    }\n\n    function getTimeToStreamEnd() {\n        return parseFloat((getStreamEndTime() - getTime()).toFixed(5));\n    }\n\n    function getStreamEndTime() {\n        return streamInfo.start + streamInfo.duration;\n    }\n\n    function play() {\n        if (streamInfo && videoModel && videoModel.getElement()) {\n            videoModel.play();\n        } else {\n            playOnceInitialized = true;\n        }\n    }\n\n    function isPaused() {\n        return streamInfo && videoModel ? videoModel.isPaused() : null;\n    }\n\n    function pause() {\n        if (streamInfo && videoModel) {\n            videoModel.pause();\n        }\n    }\n\n    function isSeeking() {\n        return streamInfo && videoModel ? videoModel.isSeeking() : null;\n    }\n\n    function seek(time, stickToBuffered, internalSeek) {\n        if (!streamInfo || !videoModel) return;\n\n        let currentTime = !isNaN(seekTarget) ? seekTarget : videoModel.getTime();\n        if (time === currentTime) return;\n\n        if (internalSeek === true) {\n            // Internal seek = seek video model only (disable 'seeking' listener)\n            // buffer(s) are already appended at requested time\n            videoModel.removeEventListener('seeking', onPlaybackSeeking);\n            logger.info('Requesting internal seek to time: ' + time);\n            videoModel.setCurrentTime(time, stickToBuffered);\n        } else {\n            seekTarget = time;\n            eventBus.trigger(Events.PLAYBACK_SEEK_ASKED);\n            logger.info('Requesting seek to time: ' + time);\n            videoModel.setCurrentTime(time, stickToBuffered);\n        }\n    }\n\n    function seekToLive() {\n        const DVRMetrics = dashMetrics.getCurrentDVRInfo();\n        const DVRWindow = DVRMetrics ? DVRMetrics.range : null;\n\n        seek(DVRWindow.end - mediaPlayerModel.getLiveDelay(), true, false);\n    }\n\n    function getTime() {\n        return streamInfo && videoModel ? videoModel.getTime() : null;\n    }\n\n    function getNormalizedTime() {\n        let t = getTime();\n\n        if (isDynamic && !isNaN(availabilityStartTime)) {\n            const timeOffset = availabilityStartTime / 1000;\n            // Fix current time for firefox and safari (returned as an absolute time)\n            if (t > timeOffset) {\n                t -= timeOffset;\n            }\n        }\n        return t;\n    }\n\n    function getPlaybackRate() {\n        return streamInfo && videoModel ? videoModel.getPlaybackRate() : null;\n    }\n\n    function getPlayedRanges() {\n        return streamInfo && videoModel ? videoModel.getPlayedRanges() : null;\n    }\n\n    function getEnded() {\n        return streamInfo && videoModel ? videoModel.getEnded() : null;\n    }\n\n    function getIsDynamic() {\n        return isDynamic;\n    }\n\n    function getStreamController() {\n        return streamController;\n    }\n\n    /**\n     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge\n     * @param {number} fragmentDuration - seconds?\n     * @param {number} dvrWindowSize - seconds?\n     * @param {number} minBufferTime - seconds?\n     * @returns {number} object\n     * @memberof PlaybackController#\n     */\n    function computeAndSetLiveDelay(fragmentDuration, dvrWindowSize, minBufferTime) {\n        let delay,\n            ret,\n            startTime;\n        const END_OF_PLAYLIST_PADDING = 10;\n        const MIN_BUFFER_TIME_FACTOR = 4;\n        const FRAGMENT_DURATION_FACTOR = 4;\n        const adjustedFragmentDuration = !isNaN(fragmentDuration) && isFinite(fragmentDuration) ? fragmentDuration : NaN;\n\n        let suggestedPresentationDelay = adapter.getSuggestedPresentationDelay();\n\n        if (settings.get().streaming.lowLatencyEnabled) {\n            delay = 0;\n        } else if (mediaPlayerModel.getLiveDelay()) {\n            delay = mediaPlayerModel.getLiveDelay(); // If set by user, this value takes precedence\n        } else if (settings.get().streaming.liveDelayFragmentCount !== null && !isNaN(settings.get().streaming.liveDelayFragmentCount) && !isNaN(adjustedFragmentDuration)) {\n            delay = adjustedFragmentDuration * settings.get().streaming.liveDelayFragmentCount;\n        } else if (settings.get().streaming.useSuggestedPresentationDelay === true && suggestedPresentationDelay !== null && !isNaN(suggestedPresentationDelay) && suggestedPresentationDelay > 0) {\n            delay = suggestedPresentationDelay;\n        } else if (!isNaN(adjustedFragmentDuration)) {\n            delay = adjustedFragmentDuration * FRAGMENT_DURATION_FACTOR;\n        } else {\n            delay = !isNaN(minBufferTime) ? minBufferTime * MIN_BUFFER_TIME_FACTOR : streamInfo.manifestInfo.minBufferTime * MIN_BUFFER_TIME_FACTOR;\n        }\n\n        startTime = adapter.getAvailabilityStartTime();\n\n        if (startTime !== null) {\n            availabilityStartTime = startTime;\n        }\n\n        if (dvrWindowSize > 0) {\n            // cap target latency to:\n            // - dvrWindowSize / 2 for short playlists\n            // - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists\n            const targetDelayCapping = Math.max(dvrWindowSize - END_OF_PLAYLIST_PADDING, dvrWindowSize / 2);\n            ret = Math.min(delay, targetDelayCapping);\n        } else {\n            ret = delay;\n        }\n        liveDelay = ret;\n        return ret;\n    }\n\n    function getLiveDelay() {\n        return liveDelay;\n    }\n\n    function setLiveDelay(value, useMaxValue = false) {\n        if (useMaxValue && value < liveDelay) {\n            return;\n        }\n\n        liveDelay = value;\n    }\n\n    function getCurrentLiveLatency() {\n        if (!isDynamic || isNaN(availabilityStartTime)) {\n            return NaN;\n        }\n        let currentTime = getNormalizedTime();\n        if (isNaN(currentTime) || currentTime === 0) {\n            return 0;\n        }\n\n        const now = new Date().getTime() + timelineConverter.getClientTimeOffset() * 1000;\n        return Math.max(((now - availabilityStartTime - currentTime * 1000) / 1000).toFixed(3), 0);\n    }\n\n    function reset() {\n        playOnceInitialized = false;\n        streamSwitch = false;\n        streamSeekTime = NaN;\n        liveDelay = 0;\n        availabilityStartTime = 0;\n        seekTarget = NaN;\n        if (videoModel) {\n            eventBus.off(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n            eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n            eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n            eventBus.off(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\n            eventBus.off(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\n            eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\n            eventBus.off(Events.PLAYBACK_ENDED, onPlaybackEnded, this);\n            eventBus.off(Events.STREAM_INITIALIZING, onStreamInitializing, this);\n            stopUpdatingWallclockTime();\n            removeAllListeners();\n        }\n        wallclockTimeIntervalId = null;\n        videoModel = null;\n        streamInfo = null;\n        isDynamic = null;\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.timelineConverter) {\n            timelineConverter = config.timelineConverter;\n        }\n        if (config.uriFragmentModel) {\n            uriFragmentModel = config.uriFragmentModel;\n        }\n        if (config.settings) {\n            settings = config.settings;\n        }\n    }\n\n    function getStartTimeFromUriParameters(rangeStart, isDynamic) {\n        const fragData = uriFragmentModel.getURIFragmentData();\n        if (!fragData || !fragData.t) {\n            return NaN;\n        }\n\n        let startTime = NaN;\n\n        // Consider only start time of MediaRange\n        // TODO: consider end time of MediaRange to stop playback at provided end time\n        fragData.t = fragData.t.split(',')[0];\n\n        // \"t=<time>\" : time is relative to period start (for static streams) or DVR window range start (for dynamic streams)\n        // \"t=posix:<time>\" : time is absolute start time as number of seconds since 01-01-1970\n        startTime = (isDynamic && fragData.t.indexOf('posix:') !== -1) ? parseInt(fragData.t.substring(6)) : (rangeStart + parseInt(fragData.t));\n\n        return startTime;\n    }\n\n    function getActualPresentationTime(currentTime) {\n        const DVRMetrics = dashMetrics.getCurrentDVRInfo();\n        const DVRWindow = DVRMetrics ? DVRMetrics.range : null;\n        let actualTime;\n\n        if (!DVRWindow) {\n            return NaN;\n        }\n\n        logger.debug(`Checking DVR window for at ${currentTime} with DVR window range ${DVRWindow.start} - ${DVRWindow.end}`);\n        if (currentTime > DVRWindow.end) {\n            actualTime = Math.max(DVRWindow.end - liveDelay, DVRWindow.start);\n\n        } else if (currentTime > 0 && currentTime + 0.250 < DVRWindow.start && Math.abs(currentTime - DVRWindow.start) < 315360000) {\n\n            // Checking currentTime plus 250ms as the 'timeupdate' is fired with a frequency between 4Hz and 66Hz\n            // https://developer.mozilla.org/en-US/docs/Web/Events/timeupdate\n            // http://w3c.github.io/html/single-page.html#offsets-into-the-media-resource\n            // Checking also duration of the DVR makes sense. We detected temporary situations in which currentTime\n            // is bad reported by the browser which causes playback to jump to start (315360000 = 1 year)\n            //actualTime = DVRWindow.start;\n            actualTime = DVRWindow.start;\n        } else {\n            actualTime = currentTime;\n        }\n\n        return actualTime;\n    }\n\n    function startUpdatingWallclockTime() {\n        if (wallclockTimeIntervalId !== null) return;\n\n        const tick = function () {\n            onWallclockTime();\n        };\n\n        wallclockTimeIntervalId = setInterval(tick, settings.get().streaming.wallclockTimeUpdateInterval);\n    }\n\n    function stopUpdatingWallclockTime() {\n        clearInterval(wallclockTimeIntervalId);\n        wallclockTimeIntervalId = null;\n    }\n\n    function updateCurrentTime() {\n        if (isPaused() || !isDynamic || videoModel.getReadyState() === 0) return;\n        const currentTime = getNormalizedTime();\n        const actualTime = getActualPresentationTime(currentTime);\n        const timeChanged = (!isNaN(actualTime) && actualTime !== currentTime);\n        if (timeChanged) {\n            logger.debug(`UpdateCurrentTime: Seek to actual time: ${actualTime} from currentTime: ${currentTime}`);\n            seek(actualTime);\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.error) return;\n\n        const representationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);\n        const info = representationInfo ? representationInfo.mediaInfo.streamInfo : null;\n\n        if (info === null || streamInfo.id !== info.id) return;\n        streamInfo = info;\n\n        updateCurrentTime();\n    }\n\n    function onCanPlay() {\n        eventBus.trigger(Events.CAN_PLAY);\n    }\n\n    function onPlaybackStart() {\n        logger.info('Native video element event: play');\n        updateCurrentTime();\n        startUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_STARTED, {\n            startTime: getTime()\n        });\n    }\n\n    function onPlaybackWaiting() {\n        logger.info('Native video element event: waiting');\n        eventBus.trigger(Events.PLAYBACK_WAITING, {\n            playingTime: getTime()\n        });\n    }\n\n    function onPlaybackPlaying() {\n        logger.info('Native video element event: playing');\n        eventBus.trigger(Events.PLAYBACK_PLAYING, {\n            playingTime: getTime()\n        });\n    }\n\n    function onPlaybackPaused() {\n        logger.info('Native video element event: pause');\n        eventBus.trigger(Events.PLAYBACK_PAUSED, {\n            ended: getEnded()\n        });\n    }\n\n    function onPlaybackSeeking() {\n        let seekTime = getTime();\n        // On some browsers/devices, in case of live streams, setting current time on video element fails when there is no buffered data at requested time\n        // Then re-set seek target time and video element will be seeked afterwhile once data is buffered (see BufferContoller)\n        if (!isNaN(seekTarget) && seekTarget !== seekTime) {\n            seekTime = seekTarget;\n        }\n        seekTarget = NaN;\n\n        logger.info('Seeking to: ' + seekTime);\n        startUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_SEEKING, {\n            seekTime: seekTime\n        });\n    }\n\n    function onPlaybackSeeked() {\n        logger.info('Native video element event: seeked');\n        eventBus.trigger(Events.PLAYBACK_SEEKED);\n        // Reactivate 'seeking' event listener (see seek())\n        videoModel.addEventListener('seeking', onPlaybackSeeking);\n    }\n\n    function onPlaybackTimeUpdated() {\n        if (streamInfo) {\n            eventBus.trigger(Events.PLAYBACK_TIME_UPDATED, {\n                timeToEnd: getTimeToStreamEnd(),\n                time: getTime()\n            });\n        }\n    }\n\n    function updateLivePlaybackTime() {\n        const now = Date.now();\n        if (!lastLivePlaybackTime || now > lastLivePlaybackTime + LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS) {\n            lastLivePlaybackTime = now;\n            onPlaybackTimeUpdated();\n        }\n    }\n\n    function onPlaybackProgress() {\n        eventBus.trigger(Events.PLAYBACK_PROGRESS);\n    }\n\n    function onPlaybackRateChanged() {\n        const rate = getPlaybackRate();\n        logger.info('Native video element event: ratechange: ', rate);\n        eventBus.trigger(Events.PLAYBACK_RATE_CHANGED, {\n            playbackRate: rate\n        });\n    }\n\n    function onPlaybackMetaDataLoaded() {\n        logger.info('Native video element event: loadedmetadata');\n        eventBus.trigger(Events.PLAYBACK_METADATA_LOADED);\n        startUpdatingWallclockTime();\n    }\n\n    // Event to handle the native video element ended event\n    function onNativePlaybackEnded() {\n        logger.info('Native video element event: ended');\n        pause();\n        stopUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_ENDED, {'isLast': streamController.getActiveStreamInfo().isLast});\n    }\n\n    // Handle DASH PLAYBACK_ENDED event\n    function onPlaybackEnded(e) {\n        if (wallclockTimeIntervalId && e.isLast) {\n            // PLAYBACK_ENDED was triggered elsewhere, react.\n            logger.info('onPlaybackEnded -- PLAYBACK_ENDED but native video element didn\\'t fire ended');\n            const seekTime = e.seekTime ? e.seekTime : getStreamEndTime();\n            videoModel.setCurrentTime(seekTime);\n            pause();\n            stopUpdatingWallclockTime();\n        }\n    }\n\n    function onPlaybackError(event) {\n        const target = event.target || event.srcElement;\n        eventBus.trigger(Events.PLAYBACK_ERROR, {\n            error: target.error\n        });\n    }\n\n    function onWallclockTime() {\n        eventBus.trigger(Events.WALLCLOCK_TIME_UPDATED, {\n            isDynamic: isDynamic,\n            time: new Date()\n        });\n\n        // Updates playback time for paused dynamic streams\n        // (video element doesn't call timeupdate when the playback is paused)\n        if (getIsDynamic() && isPaused()) {\n            updateLivePlaybackTime();\n        }\n    }\n\n    function onPlaybackProgression() {\n        if (\n            isDynamic &&\n            settings.get().streaming.lowLatencyEnabled &&\n            settings.get().streaming.liveCatchUpPlaybackRate > 0 &&\n            !isPaused() &&\n            !isSeeking()\n        ) {\n            if (needToCatchUp()) {\n                startPlaybackCatchUp();\n            } else {\n                stopPlaybackCatchUp();\n            }\n        }\n    }\n\n    function getBufferLevel() {\n        let bufferLevel = null;\n        streamController.getActiveStreamProcessors().forEach(p => {\n            const bl = p.getBufferLevel();\n            if (bufferLevel === null) {\n                bufferLevel = bl;\n            } else {\n                bufferLevel = Math.min(bufferLevel, bl);\n            }\n        });\n\n        return bufferLevel;\n    }\n\n    function needToCatchUp() {\n        const currentLiveLatency = getCurrentLiveLatency();\n        const latencyDrift = Math.abs(currentLiveLatency - mediaPlayerModel.getLiveDelay());\n        const liveCatchupLatencyThreshold = mediaPlayerModel.getLiveCatchupLatencyThreshold();\n\n        return settings.get().streaming.lowLatencyEnabled && settings.get().streaming.liveCatchUpPlaybackRate > 0 && getTime() > 0 &&\n            latencyDrift > settings.get().streaming.liveCatchUpMinDrift && (isNaN(liveCatchupLatencyThreshold) || currentLiveLatency <= liveCatchupLatencyThreshold);\n    }\n\n    function startPlaybackCatchUp() {\n        if (videoModel) {\n            const cpr = settings.get().streaming.liveCatchUpPlaybackRate;\n            const liveDelay = mediaPlayerModel.getLiveDelay();\n            const deltaLatency = getCurrentLiveLatency() - liveDelay;\n            const d = deltaLatency * 5;\n            // Playback rate must be between (1 - cpr) - (1 + cpr)\n            // ex: if cpr is 0.5, it can have values between 0.5 - 1.5\n            const s = (cpr * 2) / (1 + Math.pow(Math.E, -d));\n            let newRate = (1 - cpr) + s;\n            // take into account situations in which there are buffer stalls,\n            // in which increasing playbackRate to reach target latency will\n            // just cause more and more stall situations\n            if (playbackStalled) {\n                const bufferLevel = getBufferLevel();\n                if (bufferLevel > liveDelay / 2) {\n                    playbackStalled = false;\n                } else if (deltaLatency > 0) {\n                    newRate = 1.0;\n                }\n            }\n\n            // don't change playbackrate for small variations (don't overload element with playbackrate changes)\n            if (Math.abs(videoModel.getPlaybackRate() - newRate) > minPlaybackRateChange) {\n                videoModel.setPlaybackRate(newRate);\n            }\n\n            if (settings.get().streaming.liveCatchUpMaxDrift > 0 && !isLowLatencySeekingInProgress &&\n                deltaLatency > settings.get().streaming.liveCatchUpMaxDrift) {\n                logger.info('Low Latency catchup mechanism. Latency too high, doing a seek to live point');\n                isLowLatencySeekingInProgress = true;\n                seekToLive();\n            } else {\n                isLowLatencySeekingInProgress = false;\n            }\n        }\n    }\n\n    function stopPlaybackCatchUp() {\n        if (videoModel) {\n            videoModel.setPlaybackRate(1.0);\n        }\n    }\n\n    function onFragmentLoadProgress(e) {\n        // If using fetch and stream mode is not available, readjust live latency so it is 20% higher than segment duration\n        if (e.stream === false && settings.get().streaming.lowLatencyEnabled && !isNaN(e.request.duration)) {\n            const minDelay = 1.2 * e.request.duration;\n            if (minDelay > mediaPlayerModel.getLiveDelay()) {\n                logger.warn('Browser does not support fetch API with StreamReader. Increasing live delay to be 20% higher than segment duration:', minDelay.toFixed(2));\n                const s = {streaming: {liveDelay: minDelay}};\n                settings.update(s);\n            }\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        // do not stall playback when get an event from Stream that is not active\n        if (e.streamId !== streamInfo.id) return;\n\n        if (settings.get().streaming.lowLatencyEnabled) {\n            if (e.state === MetricsConstants.BUFFER_EMPTY && !isSeeking()) {\n                if (!playbackStalled) {\n                    playbackStalled = true;\n                    stopPlaybackCatchUp();\n                }\n            }\n        } else {\n            videoModel.setStallState(e.mediaType, e.state === MetricsConstants.BUFFER_EMPTY);\n        }\n    }\n\n    function onPlaybackStalled(e) {\n        eventBus.trigger(Events.PLAYBACK_STALLED, {\n            e: e\n        });\n    }\n\n    function onStreamInitializing(e) {\n        applyServiceDescription(e.streamInfo, e.mediaInfo);\n    }\n\n    function applyServiceDescription(streamInfo, mediaInfo) {\n        if (streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.serviceDescriptions) {\n            // is there a service description for low latency defined?\n            let llsd;\n\n            for (let i = 0; i < streamInfo.manifestInfo.serviceDescriptions.length; i++) {\n                const sd = streamInfo.manifestInfo.serviceDescriptions[i];\n                if (sd.schemeIdUri === Constants.SERVICE_DESCRIPTION_LL_SCHEME) {\n                    llsd = sd;\n                    break;\n                }\n            }\n\n            if (llsd) {\n                if (mediaInfo && mediaInfo.supplementalProperties &&\n                    mediaInfo.supplementalProperties[Constants.SUPPLEMENTAL_PROPERTY_LL_SCHEME] === 'true') {\n                    if (llsd.latency && llsd.latency.target > 0) {\n                        logger.debug('Apply LL properties coming from service description. Target Latency (ms):', llsd.latency.target);\n                        settings.update({\n                            streaming: {\n                                lowLatencyEnabled: true,\n                                liveDelay: llsd.latency.target / 1000,\n                                liveCatchUpMinDrift: llsd.latency.max > llsd.latency.target ? (llsd.latency.max - llsd.latency.target) / 1000 : undefined\n                            }\n                        });\n                    }\n                    if (llsd.playbackRate && llsd.playbackRate.max > 1.0) {\n                        logger.debug('Apply LL properties coming from service description. Max PlaybackRate:', llsd.playbackRate.max);\n                        settings.update({\n                            streaming: {\n                                lowLatencyEnabled: true,\n                                liveCatchUpPlaybackRate: llsd.playbackRate.max - 1.0\n                            }\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    function addAllListeners() {\n        videoModel.addEventListener('canplay', onCanPlay);\n        videoModel.addEventListener('play', onPlaybackStart);\n        videoModel.addEventListener('waiting', onPlaybackWaiting);\n        videoModel.addEventListener('playing', onPlaybackPlaying);\n        videoModel.addEventListener('pause', onPlaybackPaused);\n        videoModel.addEventListener('error', onPlaybackError);\n        videoModel.addEventListener('seeking', onPlaybackSeeking);\n        videoModel.addEventListener('seeked', onPlaybackSeeked);\n        videoModel.addEventListener('timeupdate', onPlaybackTimeUpdated);\n        videoModel.addEventListener('progress', onPlaybackProgress);\n        videoModel.addEventListener('ratechange', onPlaybackRateChanged);\n        videoModel.addEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\n        videoModel.addEventListener('stalled', onPlaybackStalled);\n        videoModel.addEventListener('ended', onNativePlaybackEnded);\n    }\n\n    function removeAllListeners() {\n        videoModel.removeEventListener('canplay', onCanPlay);\n        videoModel.removeEventListener('play', onPlaybackStart);\n        videoModel.removeEventListener('waiting', onPlaybackWaiting);\n        videoModel.removeEventListener('playing', onPlaybackPlaying);\n        videoModel.removeEventListener('pause', onPlaybackPaused);\n        videoModel.removeEventListener('error', onPlaybackError);\n        videoModel.removeEventListener('seeking', onPlaybackSeeking);\n        videoModel.removeEventListener('seeked', onPlaybackSeeked);\n        videoModel.removeEventListener('timeupdate', onPlaybackTimeUpdated);\n        videoModel.removeEventListener('progress', onPlaybackProgress);\n        videoModel.removeEventListener('ratechange', onPlaybackRateChanged);\n        videoModel.removeEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\n        videoModel.removeEventListener('stalled', onPlaybackStalled);\n        videoModel.removeEventListener('ended', onNativePlaybackEnded);\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getStartTimeFromUriParameters: getStartTimeFromUriParameters,\n        getTimeToStreamEnd: getTimeToStreamEnd,\n        getTime: getTime,\n        getNormalizedTime: getNormalizedTime,\n        getPlaybackRate: getPlaybackRate,\n        getPlayedRanges: getPlayedRanges,\n        getEnded: getEnded,\n        getIsDynamic: getIsDynamic,\n        getStreamController: getStreamController,\n        computeAndSetLiveDelay: computeAndSetLiveDelay,\n        getLiveDelay: getLiveDelay,\n        setLiveDelay: setLiveDelay,\n        getCurrentLiveLatency: getCurrentLiveLatency,\n        play: play,\n        isPaused: isPaused,\n        pause: pause,\n        isSeeking: isSeeking,\n        getStreamEndTime,\n        seek: seek,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nPlaybackController.__dashjs_factory_name = 'PlaybackController';\nexport default FactoryMaker.getSingletonFactory(PlaybackController);\n"]}